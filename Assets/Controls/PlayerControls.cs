//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Balloon"",
            ""id"": ""7461e09b-ecec-457e-a4d8-7ed217171806"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""743637b1-f0d6-479d-b65f-bd7091734224"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""e9c8dd36-dde5-449b-9650-7a70cb03774c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Inflate"",
                    ""type"": ""Button"",
                    ""id"": ""48f9aa07-e69b-477b-81ea-ba5e77678343"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deflate"",
                    ""type"": ""Button"",
                    ""id"": ""d1ae6245-d253-47d7-8dfc-69f8dc3a2c78"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""794d1f27-7288-4859-ac03-47c2501d803f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4b8c7931-dfe4-4dff-a671-b829d4ba57c1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d8a83f06-1f56-4916-ada3-6959e071bcbf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""77505957-6099-4831-a3b1-0960aa77d008"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2b9e6f1-c466-49d9-9e9d-eba656143503"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f1e7429d-d6e5-442f-bc8d-44ff05f24d42"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0a1f75f-27b2-485e-bc4a-f6cd711f9e42"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de7724fc-7caa-4d17-8207-0fc18a821268"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b44e5892-449d-4371-a4a7-0b3b072aa322"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fea3c02-3165-4a96-ae4a-1a4d3419cf43"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deflate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5da3d3f-aebc-4435-8d6f-562a6dd141e2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdb454f2-6036-4c9a-a65c-da570975a73d"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Balloon
        m_Balloon = asset.FindActionMap("Balloon", throwIfNotFound: true);
        m_Balloon_Move = m_Balloon.FindAction("Move", throwIfNotFound: true);
        m_Balloon_Rotate = m_Balloon.FindAction("Rotate", throwIfNotFound: true);
        m_Balloon_Inflate = m_Balloon.FindAction("Inflate", throwIfNotFound: true);
        m_Balloon_Deflate = m_Balloon.FindAction("Deflate", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Balloon.enabled, "This will cause a leak and performance issues, PlayerControls.Balloon.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Balloon
    private readonly InputActionMap m_Balloon;
    private List<IBalloonActions> m_BalloonActionsCallbackInterfaces = new List<IBalloonActions>();
    private readonly InputAction m_Balloon_Move;
    private readonly InputAction m_Balloon_Rotate;
    private readonly InputAction m_Balloon_Inflate;
    private readonly InputAction m_Balloon_Deflate;
    public struct BalloonActions
    {
        private @PlayerControls m_Wrapper;
        public BalloonActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Balloon_Move;
        public InputAction @Rotate => m_Wrapper.m_Balloon_Rotate;
        public InputAction @Inflate => m_Wrapper.m_Balloon_Inflate;
        public InputAction @Deflate => m_Wrapper.m_Balloon_Deflate;
        public InputActionMap Get() { return m_Wrapper.m_Balloon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BalloonActions set) { return set.Get(); }
        public void AddCallbacks(IBalloonActions instance)
        {
            if (instance == null || m_Wrapper.m_BalloonActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BalloonActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Inflate.started += instance.OnInflate;
            @Inflate.performed += instance.OnInflate;
            @Inflate.canceled += instance.OnInflate;
            @Deflate.started += instance.OnDeflate;
            @Deflate.performed += instance.OnDeflate;
            @Deflate.canceled += instance.OnDeflate;
        }

        private void UnregisterCallbacks(IBalloonActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Inflate.started -= instance.OnInflate;
            @Inflate.performed -= instance.OnInflate;
            @Inflate.canceled -= instance.OnInflate;
            @Deflate.started -= instance.OnDeflate;
            @Deflate.performed -= instance.OnDeflate;
            @Deflate.canceled -= instance.OnDeflate;
        }

        public void RemoveCallbacks(IBalloonActions instance)
        {
            if (m_Wrapper.m_BalloonActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBalloonActions instance)
        {
            foreach (var item in m_Wrapper.m_BalloonActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BalloonActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BalloonActions @Balloon => new BalloonActions(this);
    public interface IBalloonActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnInflate(InputAction.CallbackContext context);
        void OnDeflate(InputAction.CallbackContext context);
    }
}
